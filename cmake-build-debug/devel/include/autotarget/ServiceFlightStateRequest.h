// Generated by gencpp from file autotarget/ServiceFlightStateRequest.msg
// DO NOT EDIT!


#ifndef AUTOTARGET_MESSAGE_SERVICEFLIGHTSTATEREQUEST_H
#define AUTOTARGET_MESSAGE_SERVICEFLIGHTSTATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autotarget
{
template <class ContainerAllocator>
struct ServiceFlightStateRequest_
{
  typedef ServiceFlightStateRequest_<ContainerAllocator> Type;

  ServiceFlightStateRequest_()
    : header()
    , connected(false)
    , armed(false)
    , guided(false)
    , manual_input(false)
    , mode()
    , system_status(0)  {
    }
  ServiceFlightStateRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , connected(false)
    , armed(false)
    , guided(false)
    , manual_input(false)
    , mode(_alloc)
    , system_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef uint8_t _guided_type;
  _guided_type guided;

   typedef uint8_t _manual_input_type;
  _manual_input_type manual_input;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef uint8_t _system_status_type;
  _system_status_type system_status;





  typedef boost::shared_ptr< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ServiceFlightStateRequest_

typedef ::autotarget::ServiceFlightStateRequest_<std::allocator<void> > ServiceFlightStateRequest;

typedef boost::shared_ptr< ::autotarget::ServiceFlightStateRequest > ServiceFlightStateRequestPtr;
typedef boost::shared_ptr< ::autotarget::ServiceFlightStateRequest const> ServiceFlightStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator1> & lhs, const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.connected == rhs.connected &&
    lhs.armed == rhs.armed &&
    lhs.guided == rhs.guided &&
    lhs.manual_input == rhs.manual_input &&
    lhs.mode == rhs.mode &&
    lhs.system_status == rhs.system_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator1> & lhs, const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autotarget

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce783f756cab1193cb71ba9e90fece50";
  }

  static const char* value(const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce783f756cab1193ULL;
  static const uint64_t static_value2 = 0xcb71ba9e90fece50ULL;
};

template<class ContainerAllocator>
struct DataType< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autotarget/ServiceFlightStateRequest";
  }

  static const char* value(const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# see https://mavlink.io/en/messages/common.html#MAV_STATE\n"
"std_msgs/Header header\n"
"bool connected\n"
"bool armed\n"
"bool guided\n"
"bool manual_input\n"
"string mode\n"
"uint8 system_status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.connected);
      stream.next(m.armed);
      stream.next(m.guided);
      stream.next(m.manual_input);
      stream.next(m.mode);
      stream.next(m.system_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServiceFlightStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autotarget::ServiceFlightStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autotarget::ServiceFlightStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "guided: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.guided);
    s << indent << "manual_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manual_input);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    s << indent << "system_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOTARGET_MESSAGE_SERVICEFLIGHTSTATEREQUEST_H
