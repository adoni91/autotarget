// Generated by gencpp from file autotarget/ServiceBatteryStateRequest.msg
// DO NOT EDIT!


#ifndef AUTOTARGET_MESSAGE_SERVICEBATTERYSTATEREQUEST_H
#define AUTOTARGET_MESSAGE_SERVICEBATTERYSTATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autotarget
{
template <class ContainerAllocator>
struct ServiceBatteryStateRequest_
{
  typedef ServiceBatteryStateRequest_<ContainerAllocator> Type;

  ServiceBatteryStateRequest_()
    : voltage(0.0)
    , current(0.0)
    , charge(0.0)
    , percentage(0.0)
    , power_supply_status(0)
    , power_supply_health(0)
    , present(false)  {
    }
  ServiceBatteryStateRequest_(const ContainerAllocator& _alloc)
    : voltage(0.0)
    , current(0.0)
    , charge(0.0)
    , percentage(0.0)
    , power_supply_status(0)
    , power_supply_health(0)
    , present(false)  {
  (void)_alloc;
    }



   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _charge_type;
  _charge_type charge;

   typedef float _percentage_type;
  _percentage_type percentage;

   typedef uint8_t _power_supply_status_type;
  _power_supply_status_type power_supply_status;

   typedef uint8_t _power_supply_health_type;
  _power_supply_health_type power_supply_health;

   typedef uint8_t _present_type;
  _present_type present;





  typedef boost::shared_ptr< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ServiceBatteryStateRequest_

typedef ::autotarget::ServiceBatteryStateRequest_<std::allocator<void> > ServiceBatteryStateRequest;

typedef boost::shared_ptr< ::autotarget::ServiceBatteryStateRequest > ServiceBatteryStateRequestPtr;
typedef boost::shared_ptr< ::autotarget::ServiceBatteryStateRequest const> ServiceBatteryStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator1> & lhs, const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.charge == rhs.charge &&
    lhs.percentage == rhs.percentage &&
    lhs.power_supply_status == rhs.power_supply_status &&
    lhs.power_supply_health == rhs.power_supply_health &&
    lhs.present == rhs.present;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator1> & lhs, const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autotarget

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d361214efaf77e62acf31c50752d6deb";
  }

  static const char* value(const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd361214efaf77e62ULL;
  static const uint64_t static_value2 = 0xacf31c50752d6debULL;
};

template<class ContainerAllocator>
struct DataType< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autotarget/ServiceBatteryStateRequest";
  }

  static const char* value(const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 voltage\n"
"float32 current\n"
"float32 charge\n"
"#float32 capacity\n"
"#float32 design_capacity\n"
"float32 percentage\n"
"uint8 power_supply_status\n"
"uint8 power_supply_health\n"
"#uint8 power_supply_technology\n"
"bool present\n"
;
  }

  static const char* value(const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.charge);
      stream.next(m.percentage);
      stream.next(m.power_supply_status);
      stream.next(m.power_supply_health);
      stream.next(m.present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServiceBatteryStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autotarget::ServiceBatteryStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "charge: ";
    Printer<float>::stream(s, indent + "  ", v.charge);
    s << indent << "percentage: ";
    Printer<float>::stream(s, indent + "  ", v.percentage);
    s << indent << "power_supply_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_supply_status);
    s << indent << "power_supply_health: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_supply_health);
    s << indent << "present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOTARGET_MESSAGE_SERVICEBATTERYSTATEREQUEST_H
