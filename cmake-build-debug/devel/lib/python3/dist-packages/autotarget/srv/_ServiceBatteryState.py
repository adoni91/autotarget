# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autotarget/ServiceBatteryStateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ServiceBatteryStateRequest(genpy.Message):
  _md5sum = "d361214efaf77e62acf31c50752d6deb"
  _type = "autotarget/ServiceBatteryStateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 voltage
float32 current
float32 charge
#float32 capacity
#float32 design_capacity
float32 percentage
uint8 power_supply_status
uint8 power_supply_health
#uint8 power_supply_technology
bool present
"""
  __slots__ = ['voltage','current','charge','percentage','power_supply_status','power_supply_health','present']
  _slot_types = ['float32','float32','float32','float32','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltage,current,charge,percentage,power_supply_status,power_supply_health,present

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServiceBatteryStateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = 0.
      if self.current is None:
        self.current = 0.
      if self.charge is None:
        self.charge = 0.
      if self.percentage is None:
        self.percentage = 0.
      if self.power_supply_status is None:
        self.power_supply_status = 0
      if self.power_supply_health is None:
        self.power_supply_health = 0
      if self.present is None:
        self.present = False
    else:
      self.voltage = 0.
      self.current = 0.
      self.charge = 0.
      self.percentage = 0.
      self.power_supply_status = 0
      self.power_supply_health = 0
      self.present = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f3B().pack(_x.voltage, _x.current, _x.charge, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.voltage, _x.current, _x.charge, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.present,) = _get_struct_4f3B().unpack(str[start:end])
      self.present = bool(self.present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f3B().pack(_x.voltage, _x.current, _x.charge, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.voltage, _x.current, _x.charge, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.present,) = _get_struct_4f3B().unpack(str[start:end])
      self.present = bool(self.present)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f3B = None
def _get_struct_4f3B():
    global _struct_4f3B
    if _struct_4f3B is None:
        _struct_4f3B = struct.Struct("<4f3B")
    return _struct_4f3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autotarget/ServiceBatteryStateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ServiceBatteryStateResponse(genpy.Message):
  _md5sum = "001fde3cab9e313a150416ff09c08ee4"
  _type = "autotarget/ServiceBatteryStateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool state
"""
  __slots__ = ['state']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServiceBatteryStateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = False
    else:
      self.state = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.state
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.state,) = _get_struct_B().unpack(str[start:end])
      self.state = bool(self.state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.state
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.state,) = _get_struct_B().unpack(str[start:end])
      self.state = bool(self.state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ServiceBatteryState(object):
  _type          = 'autotarget/ServiceBatteryState'
  _md5sum = 'c7ce01d96b454c3c8b489965fb260778'
  _request_class  = ServiceBatteryStateRequest
  _response_class = ServiceBatteryStateResponse
